{"version":3,"sources":["components/ReadFee.js","components/CreateCollection.js","App.js","components/ReadString.js","components/SetString.js","serviceWorker.js","index.js"],"names":["ReadFee","state","dataKey","this","props","drizzle","contracts","FestookFactory","methods","cacheCall","setState","fee","drizzleState","getFee","value","React","Component","CreateCollection","stackId","name","symbol","handleKeyDown","e","field","target","create","_","a","contract","call","cacheSend","from","accounts","getTxStatus","transactions","txHash","transactionStack","status","htmlFor","id","type","onKeyDown","onClick","App","loading","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","className","Boolean","window","location","hostname","match","options","MyStringStore","web3","fallback","url","Drizzle","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"680KA4BeA,E,2MAzBXC,MAAQ,CAAEC,QAAS,M,mFAEE,IAKXA,EAJcC,KAAKC,MAAjBC,QACiBC,UAAUC,eAGVC,QAAT,OAA2BC,YAG3CN,KAAKO,SAAS,CAAER,c,+BAGX,IAKCS,EAHqBR,KAAKC,MAAMQ,aAAaN,UAA3CC,eAGmBM,OAAOV,KAAKF,MAAMC,SAG7C,OAAO,mCAASS,GAAOA,EAAIG,MAApB,Y,GAtBOC,IAAMC,W,mCCyDbC,E,2MAxDXhB,MAAQ,CAAEiB,QAAS,KAAMC,KAAM,GAAIC,OAAQ,I,EAE3CC,cAAgB,SAACC,EAAGC,GAChB,EAAKb,SAAL,eAAiBa,EAAQD,EAAEE,OAAOV,S,EAGtCW,O,uCAAS,WAAMC,GAAN,+BAAAC,EAAA,+DAC6B,EAAKvB,MAA/BC,EADH,EACGA,QAASO,EADZ,EACYA,aACXgB,EAAWvB,EAAQC,UAAUC,eAF9B,EAIoB,EAAKN,MAAtBkB,EAJH,EAIGA,KAAMC,EAJT,EAISA,OAJT,SAMaQ,EAASpB,QAAT,SAA6BqB,OAN1C,OAMClB,EAND,OASCO,EAAUU,EAASpB,QAAT,OAA2BsB,UAAUX,EAAMC,EAAQ,CAC/DW,KAAMnB,EAAaoB,SAAS,GAC5BlB,MAAOH,IAIX,EAAKD,SAAS,CAAEQ,UAASC,KAAM,GAAIC,OAAQ,KAftC,2C,wDAkBTa,YAAc,WAAM,MAE2B,EAAK7B,MAAMQ,aAA9CsB,EAFQ,EAERA,aAGFC,EALU,EAEMC,iBAGU,EAAKnC,MAAMiB,SAG3C,OAAKiB,EAGC,uBAAN,OAA8BD,EAAaC,IAAWD,EAAaC,GAAQE,QAHvD,M,wEAMd,IAAD,OACL,OACI,6BACI,6BACI,2BAAOC,QAAQ,QAAf,QACA,2BAAOC,GAAG,OAAOC,KAAK,OAAOC,UAAW,SAACnB,GAAD,OAAO,EAAKD,cAAcC,EAAG,YAEzE,6BACI,2BAAOgB,QAAQ,UAAf,UACA,2BAAOC,GAAG,SAASC,KAAK,OAAOC,UAAW,SAACnB,GAAD,OAAO,EAAKD,cAAcC,EAAG,cAE3E,4BAAQoB,QAASvC,KAAKsB,QAAtB,UACA,6BAAMtB,KAAK8B,oB,GAnDIlB,IAAMC,WCuDtB2B,GCvDU5B,IAAMC,UCAPD,IAAMC,U,kNFQ5Bf,MAAQ,CAAE2C,SAAS,EAAMhC,aAAc,M,mFAElB,IAAD,OACVP,EAAYF,KAAKC,MAAjBC,QAGRF,KAAK0C,YAAcxC,EAAQyC,MAAMC,WAAU,WAGzC,IAAMnC,EAAeP,EAAQyC,MAAME,WAG/BpC,EAAaqC,cAAcC,aAC7B,EAAKxC,SAAS,CAAEkC,SAAS,EAAOhC,sB,6CAMpCT,KAAK0C,gB,+BAIL,OAAI1C,KAAKF,MAAM2C,QAAgB,qBAE7B,yBAAKO,UAAU,OASb,kBAAC,EAAD,CACE9C,QAASF,KAAKC,MAAMC,QACpBO,aAAcT,KAAKF,MAAMW,eAE3B,kBAAC,EAAD,CACEP,QAASF,KAAKC,MAAMC,QACpBO,aAAcT,KAAKF,MAAMW,oB,GAzCjBI,cGGEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLN,IAAMC,EAAU,CACdnD,UAAW,CAACoD,EAAenD,GAC3BoD,KAAM,CACJC,SAAU,CACRpB,KAAM,KACNqB,IAAK,yBAMLxD,EAAU,IAAIyD,UAAQL,GAE5BM,IAASC,OAAO,kBAAC,EAAD,CAAK3D,QAASA,IAAa4D,SAASC,eAAe,SDyG7D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b1bd8a9.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ReadFee extends React.Component {\n    state = { dataKey: null };\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.FestookFactory;\n\n        // let drizzle know we want to watch the `getFee` method\n        const dataKey = contract.methods[\"getFee\"].cacheCall();\n\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n        // get the contract state from drizzleState\n        const { FestookFactory } = this.props.drizzleState.contracts;\n\n        // using the saved `dataKey`, get the variable we're interested in\n        const fee = FestookFactory.getFee[this.state.dataKey];\n\n        // if it exists, then we display its value\n        return <p>Fee: {fee && fee.value} wei</p>;\n    }\n}\n\nexport default ReadFee;","import React from \"react\";\n\nclass CreateCollection extends React.Component {\n    state = { stackId: null, name: '', symbol: '' };\n\n    handleKeyDown = (e, field) => {\n        this.setState({ [field]: e.target.value });\n    };\n\n    create = async _ => {\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.FestookFactory;\n\n        const { name, symbol } = this.state;\n\n        const fee = await contract.methods[\"getFee\"]().call()\n\n        // let drizzle know we want to call the `create` method with `name` and `symbol`\n        const stackId = contract.methods[\"create\"].cacheSend(name, symbol, {\n            from: drizzleState.accounts[0],\n            value: fee\n        });\n\n        // save the `stackId` for later reference\n        this.setState({ stackId, name: '', symbol: '' });\n    };\n\n    getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactions, transactionStack } = this.props.drizzleState;\n\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[this.state.stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n    };\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <label htmlFor=\"name\">Name</label>\n                    <input id=\"name\" type=\"text\" onKeyDown={(e) => this.handleKeyDown(e, 'name')} />\n                </div>\n                <div>\n                    <label htmlFor=\"symbol\">Symbol</label>\n                    <input id=\"symbol\" type=\"text\" onKeyDown={(e) => this.handleKeyDown(e, 'symbol')} />\n                </div>\n                <button onClick={this.create}>Create</button>\n                <div>{this.getTxStatus()}</div>\n            </div>\n        );\n    }\n}\n\nexport default CreateCollection;","import React, { Component } from 'react';\n\nimport ReadFee from \"./components/ReadFee\";\nimport CreateCollection from \"./components/CreateCollection\";\nimport ReadString from \"./components/ReadString\";\nimport SetString from \"./components/SetString\";\n\nimport './App.css';\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return (\n      <div className=\"App\">\n        {/* <ReadString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <SetString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />*/}\n        <ReadFee\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <CreateCollection\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\n\nclass ReadString extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n\n    // let drizzle know we want to watch the `myString` method\n    const dataKey = contract.methods[\"myString\"].cacheCall();\n\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { MyStringStore } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const myString = MyStringStore.myString[this.state.dataKey];\n\n    // if it exists, then we display its value\n    return <p>My stored string: {myString && myString.value}</p>;\n  }\n}\n\nexport default ReadString;","import React from \"react\";\n\nclass SetString extends React.Component {\n  state = { stackId: null };\n\n  handleKeyDown = e => {\n    // if the enter key is pressed, set the value with the string\n    if (e.keyCode === 13) {\n      this.setValue(e.target.value);\n    }\n  };\n\n  setValue = value => {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n\n    // let drizzle know we want to call the `set` method with `value`\n    const stackId = contract.methods[\"set\"].cacheSend(value, {\n      from: drizzleState.accounts[0]\n    });\n\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onKeyDown={this.handleKeyDown} />\n        <div>{this.getTxStatus()}</div>\n      </div>\n    );\n  }\n}\n\nexport default SetString;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import drizzle functions and contract artifact\nimport { Drizzle } from \"@drizzle/store\";\nimport MyStringStore from \"./contracts/MyStringStore.json\";\nimport FestookFactory from \"./contracts/FestookFactory.json\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [MyStringStore, FestookFactory],\n  web3: {\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:9545\",\n    },\n  }\n};\n\n// setup drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(<App drizzle={drizzle} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}